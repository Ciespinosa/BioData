width = 5, height = 410,
plotOutput("textPlot2")),
box(
width = 5, height = 410,
plotOutput("textPlot3"))
body <- dashboardBody(
tabItems(
#Mapas----
tabItem(tabName = "DataMapas",
box(title = "Selecciona los filtros:", solidHeader = TRUE,status="primary",
width = 2, height = 550,
selectInput(inputId = "map", label = strong("Tipo de mapa"),
choices = c("Ocurrencia", "Densidad"),
selected = "Ocurrencia"),
selectInput(inputId = "type", label = strong("Mostrar por Clase"),
choices = c("TOTAL", unique(dta$Clase)),
selected = "TOTAL"),
selectInput(inputId = "pais", label = strong("Mostrar por País"),
choices = c("TOTAL", "Ecuador", "Peru"),
selected = "TOTAL"),
selectInput(inputId = "eco", label = strong("Mostrar por Ecoregión"),
choices = c("TOTAL", "Bosques secos", "Bosques lluviosos"),
selected = "TOTAL"),
h4(strong("Nota:")),
h6("
Explora los puntos y obten información de cada uno de ellos")
),
box(width = 10, height = 550,
h2(paste0("Concentracion de Estudios")),
h4("En la Región Tumbesina"),
plotlyOutput("distPlot"))
),
##Graficos ----
tabItem(tabName = "DataGráficos",
valueBoxOutput("progressBox",width = 2),
valueBoxOutput("progressBox1",width = 2),
valueBoxOutput("approvalBox",width = 2),
valueBoxOutput("approvalBox2",width = 2),
valueBoxOutput("approvalBox3",width = 2),
valueBoxOutput("approvalBox4",width = 2),
column(width = 4,
selectInput(inputId = "pais1", label = strong("Mostrar por País"),
choices = c("TOTAL", "Ecuador", "Peru"),
selected = "TOTAL")
),
column(width = 4,
selectInput(inputId = "eco1", label = strong("Mostrar por Ecoregión"),
choices = c("TOTAL", "Bosques secos", "Bosques lluviosos"),
selected = "TOTAL")
)
,
box(width = 6, height = 340,
plotlyOutput("distPlot2")),
box(width = 6, height = 340,
plotlyOutput("distPlot3"))
),
##Conceptos----
tabItem(tabName = "DataConceptos",
box(title = "Selecciona los filtros:", solidHeader = TRUE,status="primary", width = 12,
column(width = 3,
selectInput(inputId = "pais2", label = strong("Mostrar por País"),
choices = c("TOTAL", "Ecuador", "Peru"),
selected = "TOTAL")
),
column(width = 3,
selectInput(inputId = "eco2", label = strong("Mostrar por Ecoregión"),
choices = c("TOTAL", "Bosques secos", "Bosques lluviosos"),
selected = "TOTAL")
),
column(width = 3,
selectInput(inputId = "type2", label = strong("Mostrar por Clase"),
choices = c("TOTAL", unique(dta$Clase)),
selected = "TOTAL")
),
column(width = 3,
h4(strong("Nota:")),
h6("Usa los filtros para obtener las palabras más usadas en los artículos y
los autores con más trabajos")
)
),
box(title = "Control de gráfico", solidHeader = TRUE,status="primary", width = 2,
sliderInput("freq",
"Frecuencia:",
min = 1,  max = 40, value = 3),
sliderInput("max",
"Número:",
min = 1,  max = 150,  value = 70),
h4(strong("Nota:")),
h6("Usa Frecuencia  para presentar las palabras con esa frecuencia como mínimo.
Usa Número para limitar el número de palabras en el gráfico")
),
box(
width = 5, height = 410,
plotOutput("textPlot2")),
box(
width = 5, height = 410,
plotOutput("textPlot3"))
body <- dashboardBody(
tabItems(
#Mapas----
tabItem(tabName = "DataMapas",
box(title = "Selecciona los filtros:", solidHeader = TRUE,status="primary",
width = 2, height = 550,
selectInput(inputId = "map", label = strong("Tipo de mapa"),
choices = c("Ocurrencia", "Densidad"),
selected = "Ocurrencia"),
selectInput(inputId = "type", label = strong("Mostrar por Clase"),
choices = c("TOTAL", unique(dta$Clase)),
selected = "TOTAL"),
selectInput(inputId = "pais", label = strong("Mostrar por País"),
choices = c("TOTAL", "Ecuador", "Peru"),
selected = "TOTAL"),
selectInput(inputId = "eco", label = strong("Mostrar por Ecoregión"),
choices = c("TOTAL", "Bosques secos", "Bosques lluviosos"),
selected = "TOTAL"),
h4(strong("Nota:")),
h6("
Explora los puntos y obten información de cada uno de ellos")
),
box(width = 10, height = 550,
h2(paste0("Concentracion de Estudios")),
h4("En la Región Tumbesina"),
plotlyOutput("distPlot"))
),
##Graficos ----
tabItem(tabName = "DataGráficos",
valueBoxOutput("progressBox",width = 2),
valueBoxOutput("progressBox1",width = 2),
valueBoxOutput("approvalBox",width = 2),
valueBoxOutput("approvalBox2",width = 2),
valueBoxOutput("approvalBox3",width = 2),
valueBoxOutput("approvalBox4",width = 2),
column(width = 4,
selectInput(inputId = "pais1", label = strong("Mostrar por País"),
choices = c("TOTAL", "Ecuador", "Peru"),
selected = "TOTAL")
),
column(width = 4,
selectInput(inputId = "eco1", label = strong("Mostrar por Ecoregión"),
choices = c("TOTAL", "Bosques secos", "Bosques lluviosos"),
selected = "TOTAL")
)
,
box(width = 6, height = 340,
plotlyOutput("distPlot2")),
box(width = 6, height = 340,
plotlyOutput("distPlot3"))
),
##Conceptos----
tabItem(tabName = "DataConceptos",
box(title = "Selecciona los filtros:", solidHeader = TRUE,status="primary", width = 12,
column(width = 3,
selectInput(inputId = "pais2", label = strong("Mostrar por País"),
choices = c("TOTAL", "Ecuador", "Peru"),
selected = "TOTAL")
),
column(width = 3,
selectInput(inputId = "eco2", label = strong("Mostrar por Ecoregión"),
choices = c("TOTAL", "Bosques secos", "Bosques lluviosos"),
selected = "TOTAL")
),
column(width = 3,
selectInput(inputId = "type2", label = strong("Mostrar por Clase"),
choices = c("TOTAL", unique(dta$Clase)),
selected = "TOTAL")
),
column(width = 3,
h4(strong("Nota:")),
h6("Usa los filtros para obtener las palabras más usadas en los artículos y
los autores con más trabajos")
)
),
box(title = "Control de gráfico", solidHeader = TRUE,status="primary", width = 2,
sliderInput("freq",
"Frecuencia:",
min = 1,  max = 40, value = 3),
sliderInput("max",
"Número:",
min = 1,  max = 150,  value = 70),
h4(strong("Nota:")),
h6("Usa Frecuencia  para presentar las palabras con esa frecuencia como mínimo.
Usa Número para limitar el número de palabras en el gráfico")
),
box(
width = 5, height = 410,
plotOutput("textPlot2")),
box(
width = 5, height = 410,
plotOutput("textPlot3"))
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
59.2+6.7
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
box(
title = "Social Buttons",
status = NULL,
socialButton(
href = "https://dropbox.com",
icon = icon("dropbox")
),
socialButton(
href = "https://github.com",
icon = icon("github")
)
)
),
title = "Social Buttons"
),
server = function(input, output) { }
)
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
fig <- dta
fig <- fig %>%
layout(
mapbox = list(
style = 'open-street-map',
zoom =3.8,
center = list(lon = -80, lat = -2),
coloraxis = list(colorscale = "Rainbow")) )
fig <- fig %>%
plot_ly(
lat = ~X,
lon = ~Y,
type = 'scattermapbox',
hovertext = 'text',
mode = 'markers',
color = dta$Clase,
paste("Clase: ", dta$Clase,
"<br>País: ", dta$País,
"<br>Localidad: ", dta$Localidad)
)
library(plotly)
library(readxl)
dta <- read_excel("2._data/VertebradosRT.xlsx", sheet = "Ubicacion")
clase <- read_excel("2._data/VertebradosRT.xlsx", sheet = "Taxonomia")
dta <- aggregate(dta, list(codigo = dta$Codigo,
Pais = dta$País,
Provincia = dta$Provincia,
Canton = dta$Cantón,
Localidad = dta$Localidad), max)
dta <- merge(dta, clase, by = "Codigo", all.x = T)
fig <- dta
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~X,
lon = ~Y,
coloraxis = 'coloraxis',
radius = 2)
fig <- fig %>%
layout(
mapbox = list(
style = "stamen-terrain",
center = list(lon=-75),
zoom = 3),
coloraxis = list(colorscale = "Rainbow"))
fig
fig <- dta
fig <- fig %>%
plot_ly(
lat = ~X,
lon = ~Y,
type = 'scattermapbox',
hovertext = 'text',
mode = 'markers',
color = dta$Clase,
paste("Clase: ", dta$Clase,
"<br>País: ", dta$País,
"<br>Localidad: ", dta$Localidad)
)
fig <- fig %>%
layout(
mapbox = list(
style = 'open-street-map',
zoom =3.8,
center = list(lon = -80, lat = -2),
coloraxis = list(colorscale = "Rainbow")) )
fig
library(rnaturalearth)
world <- ne_countries(returnclass = "sf", continent = "South America")
class(world)
library(sf)
data(wrld_simpl)
dta_spoint <- dta
dta_spoint <- dta_spoint[complete.cases(dta_spoint),]
dta_spoint$country <- droplevels(as.factor(dta_spoint$Pais), exclude = 0)
coordinates(dta_spoint) <-  ~Y+X
##Unificamos la proyeccion espacial
crs(dta_spoint) <- crs(wrld_simpl)
class(dta_spoint)
##Extraemos los datos de la capa de fondo
ovr <- over(dta_spoint, wrld_simpl)
##Unificamos los datos
dta1 <- dta[complete.cases(dta_spoint),]
xx <- cbind(dta1, filtro=ovr$NAME)
dtaF <- xx[which(xx$filtro=="Ecuador"),]
fig <- dtaF
fig <- fig %>%
plot_ly(
lat = ~X,
lon = ~Y,
type = 'scattermapbox'
)
fig <- fig %>%
layout(
mapbox = list(
style = 'open-street-map',
zoom =3.8,
center = list(lon = -80, lat = -2),
coloraxis = list(colorscale = "Rainbow")) )
fig
dta_spoint <- dta_spoint[dta_spoint$country==Ecuador,]
pais <- table(ovr$NAME)
pais <- pais[pais>0]
rsconnect::setAccountInfo(name='ecologiacivan',
token='D866C8ACD5B0A0ECCCDAF470F210B0E5',
secret='<SECRET>')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
library(shiny); runApp('BioData.R')
runApp('BioData.R')
library(shiny); runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
library(shiny)
library(shinydashboard)
library(leaflet)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
tags$head(tags$script('
// Define function to set height of "map" and "map_container"
setHeight = function() {
var window_height = $(window).height();
var header_height = $(".main-header").height();
var boxHeight = window_height - header_height - 30;
$("#map_container").height(boxHeight);
$("#map").height(boxHeight - 20);
};
// Set input$box_height when the connection is established
$(document).on("shiny:connected", function(event) {
setHeight();
});
// Refresh the box height on every window resize event
$(window).on("resize", function(){
setHeight();
});
')),
# Boxes need to be put in a row (or column)
fluidRow(
box(id = "map_container",
leafletOutput("map")
),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$map <- renderLeaflet( {
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48))
})
}
shinyApp(ui, server)
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
library(shinydashboard)
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
library(shiny); runApp('BioData.R')
runApp('BioData.R')
rsconnect::appDependencies()
rsconnect::appDependencies()
runApp('BioData.R')
runApp('BioData.R')
gs4_auth()
library(googlesheets4)
library(googleAuthR)
library(googlesheets)
sheets_auth(
email = "civan.espinosain@gmail.com",
path = NULL,
scopes = "https://www.googleapis.com/auth/spreadsheets",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = "rest.json"
)
gs4_auth()
runApp('BioData.R')
ss <- gs4_get("https://docs.google.com/spreadsheets/d/1NC7KJAd8r-hFIKbK5A2lCHIg0-Ry1b6W-CxtwP0Rk2o/edit?usp=sharing") # do the authentication once, manually.
data_to_write <- read_sheet('https://docs.google.com/spreadsheets/d/1NC7KJAd8r-hFIKbK5A2lCHIg0-Ry1b6W-CxtwP0Rk2o')
data_to_write
ss <- gs4_get("https://docs.google.com/spreadsheets/d/1NC7KJAd8r-hFIKbK5A2lCHIg0-Ry1b6W-CxtwP0Rk2o/edit?usp=sharing") # do the authentication once, manually.
data_to_write <- read_sheet('https://docs.google.com/spreadsheets/d/1NC7KJAd8r-hFIKbK5A2lCHIg0-Ry1b6W-CxtwP0Rk2o')
runApp('BioData.R')
data_to_write <- read_sheet('https://docs.google.com/spreadsheets/d/1NC7KJAd8r-hFIKbK5A2lCHIg0-Ry1b6W-CxtwP0Rk2o')
data_to_write
sheet_append(ss,
data)
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
gs4_deauth()
# sheets_auth(
#   email = "civan.espinosain@gmail.com",
#   path = NULL,
#   scopes = "https://www.googleapis.com/auth/spreadsheets",
#   cache = gargle::gargle_oauth_cache(),
#   use_oob = gargle::gargle_oob_default(),
#   token = "rest.json"
# )
gs4_auth()
runApp('BioData.R')
View(dta1)
runApp('BioData.R')
runApp('BioData.R')
runApp('BioData.R')
